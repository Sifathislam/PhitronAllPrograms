CREATE DATABASE SCHOOL;

USE SCHOOL;

-- CREATE TABLE OF STUDENT
CREATE TABLE STUDENT(
	STUDENT_ID VARCHAR(2) PRIMARY KEY,
    STUDENT_NAME VARCHAR(50) NOT NULL,
    DATE_OF_BIRTH DATE DEFAULT("2000-01-01")
);

-- CREATE TABLE OF TEACHER
CREATE TABLE TEACHER(
	TEACHER_ID VARCHAR(2) PRIMARY KEY,
    SUBJECT_NAME VARCHAR(20) NOT NULL,
    STUDENT_ID VARCHAR(2),
	CONSTRAINT STD_ID FOREIGN KEY(STUDENT_ID) REFERENCES STUDENT(STUDENT_ID)
);

-- CREATE TABLE OF COURSE
CREATE TABLE COURSE(
	COURSE_ID VARCHAR(2) PRIMARY KEY,
	COURSE_NAME VARCHAR(50) NOT NULL,
    WHO_TAKE_COURSE_ID VARCHAR(2),
    CONSTRAINT TH_ID FOREIGN KEY (WHO_TAKE_COURSE_ID) REFERENCES TEACHER(TEACHER_ID)
);

ALTER TABLE COURSE
ADD COURSE_ID VARCHAR(2) PRIMARY KEY;

-- CREATE TABLE OF ENROLL
CREATE TABLE ENROLL(
	ENROLL_ID VARCHAR(2) PRIMARY KEY,
    ENROLL_TIME DATE DEFAULT (current_date()),
    COURSE_ID VARCHAR(2),
    STUDENT_ID VARCHAR(2),
    CONSTRAINT STDENRL_ID FOREIGN KEY(STUDENT_ID) REFERENCES STUDENT(STUDENT_ID) ON DELETE CASCADE,
	CONSTRAINT CRS_ID FOREIGN KEY(COURSE_ID) REFERENCES COURSE(COURSE_ID) ON DELETE SET NULL
);

-- Duplicate Rows:
# UNION: The UNION operator removes duplicate rows from the combined result set. If there are duplicate rows in the SELECT statements being unioned, only one instance of each unique row is included in the result.
# UNION ALL: The UNION ALL operator retains all rows from the combined result set, including duplicates. If there are duplicate rows in the SELECT statements being unioned, all instances of those rows are included in the result. --
#Here's an example :
SELECT ID, Name FROM TableA
UNION
SELECT ID, Name FROM TableB;

SELECT ID, Name FROM TableA
UNION ALL
SELECT ID, Name FROM TableB;
